name: 'Terraform'
on:
  push:
    branches: [ uat, dev, preprod ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    #environment: uat
    # Use the Bash shell
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set environment based on branch
      id: set-environment
      run: |
        echo "Running on branch ${{ github.ref }}"
        if [ "${{ github.ref }}" = "refs/heads/preprod" ]; then
          echo "::set-output name=environment::preprod"
        elif [ "${{ github.ref }}" = "refs/heads/uat" ]; then
          echo "::set-output name=environment::uat"
        else
          echo "::set-output name=environment::dev"
        fi
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new Terraform
    - name: Terraform Init
      run: terraform init -backend-config=backend-configs/state-${{ steps.set-environment.outputs.environment }}.conf #terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file=env-tfvars/${{ steps.set-environment.outputs.environment }}.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/${{ steps.set-environment.outputs.environment }}' && github.event_name == 'push'
      run: terraform apply -auto-approve -var-file=env-tfvars/${{ steps.set-environment.outputs.environment }}.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      
    # - name: Terraform Destroy
    #   if: github.ref == 'refs/heads/${{ steps.set-environment.outputs.environment }}' && github.event_name == 'push'
    #   run: terraform destroy -auto-approve -var-file=env-tfvars/${{ steps.set-environment.outputs.environment }}.tfvars
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}